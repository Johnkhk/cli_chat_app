syntax = "proto3";

package friends;

option go_package = "github.com/johnkhk/cli_chat_app/proto/friends";
import "google/protobuf/timestamp.proto";

// Enum for friend request statuses
enum FriendRequestStatus {
    UNKNOWN = 0;     // Default status
    PENDING = 1;     // Friend request is pending
    ACCEPTED = 2;    // Friend request has been accepted
    DECLINED = 3;    // Friend request has been declined
    CANCELED = 4;    // Friend request has been canceled
    FAILED = 5;      // Operation related to the friend request failed
}

// Service definition for Friend Management
service FriendManagement {
    rpc GetFriendList(GetFriendListRequest) returns (GetFriendListResponse);
    rpc GetIncomingFriendRequests(GetIncomingFriendRequestsRequest) returns (GetIncomingFriendRequestsResponse);
    rpc GetOutgoingFriendRequests(GetOutgoingFriendRequestsRequest) returns (GetOutgoingFriendRequestsResponse);
    rpc SendFriendRequest(SendFriendRequestRequest) returns (SendFriendRequestResponse);
    rpc AcceptFriendRequest(AcceptFriendRequestRequest) returns (AcceptFriendRequestResponse);
    rpc DeclineFriendRequest(DeclineFriendRequestRequest) returns (DeclineFriendRequestResponse);
    rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse);
}

// Messages for fetching the friend list
message GetFriendListRequest {}

message GetFriendListResponse {
    repeated Friend friends = 1;
}

// Messages for fetching incoming friend requests
message GetIncomingFriendRequestsRequest {}

message GetIncomingFriendRequestsResponse {
    repeated FriendRequest incoming_requests = 1;
}

// Messages for fetching outgoing friend requests
message GetOutgoingFriendRequestsRequest {}

message GetOutgoingFriendRequestsResponse {
    repeated FriendRequest outgoing_requests = 1;
}

// Messages for sending a friend request
message SendFriendRequestRequest {
    string recipient_username = 1; // Recipient's username
}

message SendFriendRequestResponse {
    FriendRequestStatus status = 1; // Status of the friend request operation
    string message = 2; // Optional message for additional context
    google.protobuf.Timestamp timestamp = 3; // When the request was processed
}

// Messages for accepting a friend request
message AcceptFriendRequestRequest {
    int32 request_id = 1; // Request ID of the friend request
}

message AcceptFriendRequestResponse {
    FriendRequestStatus status = 1; // Status of the operation (e.g., "ACCEPTED", "FAILED")
    string message = 2; // Optional message for additional context
    google.protobuf.Timestamp timestamp = 3; // When the request was accepted
}

// Messages for declining a friend request
message DeclineFriendRequestRequest {
    int32 request_id = 1; // Request ID of the friend request
}

message DeclineFriendRequestResponse {
    FriendRequestStatus status = 1; // Status of the operation (e.g., "DECLINED", "FAILED")
    string message = 2; // Optional message for additional context
    google.protobuf.Timestamp timestamp = 3; // When the request was declined
}

// Messages for removing a friend
message RemoveFriendRequest {
    int32 friend_id = 1; // Friend's user ID to remove
}

message RemoveFriendResponse {
    bool success = 1; // Indicates if the removal was successful
    string message = 2; // Optional message for additional context
    google.protobuf.Timestamp timestamp = 3; // When the friend was removed
}

// Friend information
message Friend {
    int32 user_id = 1;    // User ID of the friend
    string username = 2;   // Username of the friend
    google.protobuf.Timestamp added_at = 3; // When the friend was added
}

// Friend request information
message FriendRequest {
    int32 request_id = 1;       // Unique ID of the friend request
    int32 sender_id = 2;        // User ID of the sender
    int32 recipient_id = 3;     // User ID of the recipient
    FriendRequestStatus status = 4;    // Status of the friend request (e.g., "PENDING", "ACCEPTED", "DECLINED")
    google.protobuf.Timestamp created_at = 5; // When the request was created
}
