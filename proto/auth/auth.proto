syntax = "proto3";

package auth;
option go_package = "github.com/johnkhk/cli_chat_app/proto/auth";

// protoc --go_out=./genproto/auth --go-grpc_out=./genproto/auth --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative ./proto/auth/auth.proto

// Define the authentication service.
service AuthService {
  rpc RegisterUser (RegisterRequest) returns (RegisterResponse) {}
  rpc LoginUser (LoginRequest) returns (LoginResponse) {}
  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {}  
  rpc UploadPublicKeys (PublicKeyUploadRequest) returns (PublicKeyUploadResponse) {}
  rpc GetPublicKeyBundle (PublicKeyBundleRequest) returns (PublicKeyBundleResponse) {}
}

// Define the request and response messages for registration.
message RegisterRequest {
  string username = 1;
  string password = 2;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
}

// Define the request and response messages for login.
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  uint32 user_id = 2;  // The unique ID of the user
  string message = 3;
  string access_token = 4;
  string refresh_token = 5;
}

// Define the request and response messages for refreshing the token.
message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
}

message PublicKeyUploadRequest {
  bytes identity_key = 1;              // The public identity key for the device
  uint32 pre_key_id = 2;               // The ID of the regular or one-time pre-key
  bytes pre_key = 3;                   // The public pre-key (could be one-time or regular)
  uint32 signed_pre_key_id = 4;        // The ID of the signed pre-key
  bytes signed_pre_key = 5;            // The public signed pre-key
  bytes signed_pre_key_signature = 6;  // Signature of the signed pre-key
  uint32 registration_id = 7;          // User's registration ID
  uint32 device_id = 8;                // Device ID to distinguish between user's devices
  repeated OneTimePreKey one_time_pre_keys = 9;  // Batch of One-Time PreKeys
}

message OneTimePreKey {
  uint32 pre_key_id = 1;   // Unique ID for each One-Time PreKey
  bytes pre_key = 2;       // The public part of the One-Time PreKey
}

// Response message after uploading public keys
message PublicKeyUploadResponse {
  bool success = 1;        // True if the upload was successful
  string message = 2;      // Optional message in case of failure or additional info
}

// Request message for fetching the public key bundle
message PublicKeyBundleRequest {
  uint32 user_id = 1;  // The ID of the user whose public keys you want to retrieve
  uint32 device_id = 2; // The device ID of the target user (optional)
}

// Response message for fetching the public key bundle
message PublicKeyBundleResponse {
  bytes identity_key = 1;              // The public identity key for the device
  uint32 pre_key_id = 2;               // The ID of the regular pre-key
  bytes pre_key = 3;                   // The public pre-key (regular)
  uint32 signed_pre_key_id = 4;        // The ID of the signed pre-key
  bytes signed_pre_key = 5;            // The public signed pre-key
  bytes signed_pre_key_signature = 6;  // Signature of the signed pre-key
  repeated OneTimePreKey one_time_pre_keys = 7;  // Optional batch of one-time prekeys
}