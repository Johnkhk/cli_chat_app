syntax = "proto3";

package auth;
option go_package = "github.com/johnkhk/cli_chat_app/proto/auth";

// protoc --go_out=./genproto/auth --go-grpc_out=./genproto/auth --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative ./proto/auth/auth.proto

// Define the authentication service.
service AuthService {
  rpc RegisterUser (RegisterRequest) returns (RegisterResponse) {}
  rpc LoginUser (LoginRequest) returns (LoginResponse) {}
  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {}  
  rpc UploadPublicKey (UploadPublicKeyRequest) returns (UploadPublicKeyResponse) {}  
  rpc GetPublicKey (GetPublicKeyRequest) returns (GetPublicKeyResponse) {}  // New method to get public key
}

// Define the request and response messages for registration.
message RegisterRequest {
  string username = 1;
  string password = 2;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
}

// Define the request and response messages for login.
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
}

// Define the request and response messages for refreshing the token.
message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
}

// Define the request and response messages for uploading the public key.
message UploadPublicKeyRequest {
  string username = 1;
  bytes public_key = 2;
}

message UploadPublicKeyResponse {
  bool success = 1;
  string message = 2;
}

// Define the request and response messages for getting the public key.
message GetPublicKeyRequest {
  int32 user_id = 1;  // The unique ID of the user whose public key is being requested
}

message GetPublicKeyResponse {
  bytes public_key = 1;  // The user's public key in bytes
  bool success = 2;      // Indicates if the retrieval was successful
  string message = 3;    // A message indicating the result of the retrieval
}
