syntax = "proto3";

package chat;

option go_package = "github.com/johnkhk/cli_chat_app/proto/chat";

// Define the gRPC service for the chat application
// Note only message content and files are encrypted
// Metadata such as recipient_id and timestamp are not encrypted
// Store everything in the client's local sqlite database
service ChatService {
  // Bidirectional streaming RPC for sending and receiving messages
  rpc StreamMessages(stream MessageRequest) returns (stream MessageResponse);
}

// MessageRequest is used by the client to send messages or files to another user
message MessageRequest {
  uint32 recipient_id = 1;          // Unique identifier of the recipient (user or group ID)
  bytes encrypted_message = 2;     // The message content encrypted with the recipient's public key
  string message_id = 3;           // Unique identifier for this message, generated by the client
  string timestamp = 4;            // Timestamp of when the message was sent, in ISO 8601 format
  bytes file_content = 5;          // (Optional) Encrypted file data being sent (if any)
  string file_name = 6;            // (Optional) Original name of the file being sent (if any)
  string file_type = 7;            // (Optional) MIME type of the file (e.g., "image/png", "application/pdf")
  uint64 file_size = 8;             // (Optional) Size of the file in bytes
}

// // MessageResponse is used by the server to acknowledge receipt of a message or file
// message MessageResponse {
//   string message_id = 1;           // The message ID of the message being acknowledged
//   string status = 2;               // Status of the message (e.g., "delivered", "read", "error")
//   string timestamp = 3;            // Timestamp of when the server processed or acknowledged the message
//   string error_message = 4;        // (Optional) Error message if the message processing failed
// }

// MessageResponse is used by the server to deliver messages to the recipient.
message MessageResponse {
  uint32 sender_id = 1;             // Unique identifier of the sender
  string sender_username = 2;       // Username of the sender
  uint32 recipient_id = 3;          // Unique identifier of the recipient
  string message_id = 4;            // The message ID of the message being acknowledged or delivered
  bytes encrypted_message = 5;      // The message content encrypted with the recipient's public key
  string status = 6;                // Status of the message (e.g., "delivered", "read", "received")
  string timestamp = 7;             // Timestamp of when the server processed or delivered the message
}

